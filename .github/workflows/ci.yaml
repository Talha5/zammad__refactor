name: CI

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    # If you need DB like PostgreSQL, Redis then define service below.
    # https://github.com/actions/example-services/tree/master/.github/workflows
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: TTS_test
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        # tmpfs makes DB faster by using RAM
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server
      elasticsearch:
        image: elasticsearch:6.8.3
        ports:
        - 9200/tcp
        options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10
    # https://help.github.com/en/articles/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
    strategy:
      fail-fast: false
      matrix:
        # [n] - where the n is a number of parallel jobs you want to run your tests on.
        # Use a higher number if you have slow tests to split them between more parallel jobs.
        # Remember to update the value of the `ci_node_index` below to (0..n-1).
        ci_node_total: [2]
        # Indexes for parallel jobs (starting from zero).
        # E.g. use [0, 1] for 2 parallel jobs, [0, 1, 2] for 3 parallel jobs, etc.
        ci_node_index: [0, 1]

    env:
      RAILS_ENV: test
      GEMFILE_RUBY_VERSION: 2.7.2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    steps:
      - uses: actions/checkout@v2
        with:
            node-version: '16'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          # Not needed with a .ruby-version file
          ruby-version: 3.0.4
          # runs 'bundle install' and caches installed gems automatically
          bundler-cache: true
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Install requirements
        run: |
          sudo apt-add-repository multiverse && sudo apt-get update
          sudo apt-get -yqq install libpq-dev libimlib2 libimlib2-dev
      - name: Verify Elasticsearch connection from host
        env:
          ELASTIC_SEARCH_URL: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
        run: |
          echo $ELASTIC_SEARCH_URL
          curl -fsSL "$ELASTIC_SEARCH_URL/_cat/health?h=status"
      - name: Gem cache
        id: cache-bundle
        uses: actions/cache@v1
        with:
          node-version: '16.x'
          path: vendor/bundle
          key: bundle-${{ hashFiles('**/Gemfile.lock') }}
      - name: Bundle install
        env:
          RAILS_ENV: test
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3 --path vendor/bundle
      - name: Install yarn
        run: npm install -g yarn
      - name: Get yarn cache dir
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Yarn install
        run: |
          yarn install
      - name: Setup & start database
        run: |
          sudo service postgresql start
          cp config/database/database.yml config/database.yml
          bundle exec rake zammad:db:init
          bundle exec rake assets:precompile
      - name: Setup DB, Run tests
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
          POSTGRES_HOST: localhost
          RAILS_ENV: test
          KNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC: b2c428f382d7fcefe9e885b83877f9a9
          # KNAPSACK_PRO_TEST_SUITE_TOKEN_CUCUMBER: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_CUCUMBER }}
          # KNAPSACK_PRO_TEST_SUITE_TOKEN_MINITEST: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_MINITEST }}
          # KNAPSACK_PRO_TEST_SUITE_TEST_UNIT: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_TEST_UNIT }}
          # KNAPSACK_PRO_TEST_SUITE_TOKEN_SPINACH: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_TOKEN_SPINACH }}
          # KNAPSACK_PRO_CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
          # KNAPSACK_PRO_CI_NODE_INDEX: ${{ matrix.ci_node_index }}
          KNAPSACK_PRO_LOG_LEVEL: info
          # if you use Knapsack Pro Queue Mode you must set below env variable
          # to be able to retry CI build and run previously recorded tests
          # https://github.com/KnapsackPro/knapsack_pro-ruby#knapsack_pro_fixed_queue_split-remember-queue-split-on-retry-ci-node
          KNAPSACK_PRO_FIXED_QUEUE_SPLIT: true
          # RSpec split test files by test examples feature - it's optional
          # https://knapsackpro.com/faq/question/how-to-split-slow-rspec-test-files-by-test-examples-by-individual-it
          # KNAPSACK_PRO_RSPEC_SPLIT_BY_TEST_EXAMPLES: true
        run: |
          bundle exec rspec
          # run tests in Knapsack Pro Regular Mode
          bundle exec rake knapsack_pro:rspec
          # bundle exec rake knapsack_pro:cucumber
          # bundle exec rake knapsack_pro:minitest
          # bundle exec rake knapsack_pro:test_unit
          # bundle exec rake knapsack_pro:spinach
          # you can use Knapsack Pro in Queue Mode once recorded first CI build with Regular Mode
          # bundle exec rake knapsack_pro:queue:rspec
          # bundle exec rake knapsack_pro:queue:cucumber
          # bundle exec rake knapsack_pro:queue:minitest
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: output/test/code-coverage.html